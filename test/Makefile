##===- test/Makefile ---------------------------------------*- Makefile -*-===##

#
# Relative path to the top of the source tree.
#
LEVEL = ..

all:: check-local

#
# The 'lit' tool is the default test runner.
#
check-local:: check-local-lit

#
# Force including configuration here. We need vars for Makefile.tests.
#
include $(LEVEL)/Makefile.config

#
# Include other test rules
#
include Makefile.tests

ifneq ($(GREP_OPTIONS),)
  $(warning GREP_OPTIONS environment variable may interfere with test results)
endif

ifdef VERBOSE
  LIT_ARGS := -v
else
  LIT_ARGS := -s -v
endif

# Using -jN causes crash on Cygwin's python.
ifneq (,$(filter $(HOST_OS),Cygwin))
  LIT_ARGS += -j1
endif

ifdef TESTSUITE
  LIT_TESTSUITE := $(TESTSUITE)
  CLEANED_TESTSUITE := $(patsubst %/,%,$(TESTSUITE))
  CLEANED_TESTSUITE := $(patsubst test/%,%,$(CLEANED_TESTSUITE))
else
  LIT_TESTSUITE := .
endif

ifdef VG
  VALGRIND := valgrind --tool=memcheck        \
                       --quiet                \
		       --trace-children=yes   \
		       --error-exitcode=3     \
		       --leak-check=full      \
		       $(VALGRIND_EXTRA_ARGS)
endif

# Check what to run for -all.
LIT_ALL_TESTSUITES := $(LIT_TESTSUITE)

extra-lit-site-cfgs::
.PHONY: extra-lit-site-cfgs

check-local-lit:: lit.site.cfg Unit/lit.site.cfg
	$(LLVM_SRC_ROOT)/utils/lit/lit.py $(LIT_ARGS) $(LIT_TESTSUITE)

check-local-all:: lit.site.cfg Unit/lit.site.cfg extra-lit-site-cfgs
	$(LLVM_SRC_ROOT)/utils/lit/lit.py $(LIT_ARGS) $(LIT_ALL_TESTSUITES)

clean::
	$(RM) -rf `find $(PROJ_OBJ_ROOT)/test -name Output -type d -print`

ifeq ($(TARGET_OS),Darwin)
  DSYMUTIL := dsymutil
else
  DSYMUTIL := true
endif

ifdef TargetCommonOpts
  BUGPOINT_TOPTS := "-gcc-tool-args $(TargetCommonOpts)"
else
  BUGPOINT_TOPTS := ""
endif

FORCE:

ifeq ($(DISABLE_ASSERTIONS),1)
  ENABLE_ASSERTIONS := 0
else
  ENABLE_ASSERTIONS := 1
endif

LLVM_TOOL_DIR = $(LLVM_OBJ_ROOT)/$(BuildMode)/bin

#
# This rule has been mostly re-defined because we need to export tools/paths
# specific to the OpenCRun runtime instead of LLVM ones.
#

site.exp: FORCE
	@echo 'Making a new site.exp file...'
	@echo '## Autogenerated by OpenCRun configuration.' > site.tmp
	@echo '# Do not edit!' >> site.tmp
	@echo 'set target_triplet "$(TARGET_TRIPLE)"' >> site.tmp
	@echo 'set TARGETS_TO_BUILD "$(TARGETS_TO_BUILD)"' >> site.tmp
	@echo 'set llvmtoolsdir "$(LLVM_TOOL_DIR)"' >> site.tmp
	@echo 'set projlibsdir "$(LibDir)"' >> site.tmp
	@echo 'set projshlibdir "$(SharedLibDir)"' >> site.tmp
	@echo 'set compile_c "'$(CC) $(CPP.Flags)      \
	      $(TargetCommonOpts) $(CompileCommonOpts) \
	      '-c"' >> site.tmp
	@echo 'set compile_cxx "'$(CXX) $(CPP.Flags) $(CXX.Flags) \
	      $(TargetCommonOpts) $(CompileCommonOpts)            \
	      '-c -x c++"' >> site.tmp
	@echo 'set link "'$(CXX) $(CPP.Flags) $(CXX.Flags) \
	      $(TargetCommonOpts) $(CompileCommonOpts)     \
	      $(LD.Flags)'"' >> site.tmp
	@echo 'set llvmgcc "$(LLVMGCC) $(TargetCommonOpts) ' \
	      '$(EXTRA_OPTIONS)"' >> site.tmp
	@echo 'set llvmgxx "$(LLVMGCC) $(TargetCommonOpts) ' \
	      '$(EXTRA_OPTIONS)"' >> site.tmp
	@echo 'set bugpoint_topts $(BUGPOINT_TOPTS)' >> site.tmp
	@echo 'set shlibext "$(SHLIBEXT)"' >> site.tmp
	@echo 'set valgrind "$(VALGRIND)"' >> site.tmp
	@echo 'set grep "$(GREP)"' >> site.tmp
	@echo 'set gas "$(GAS)"' >> site.tmp
	@echo 'set llvmdsymutil "$(DSYMUTIL)"' >> site.tmp
	@echo 'set emitir "$(LLVMCC_EMITIR_FLAG)"' >> site.tmp
	@echo '## All variables above are generated by configure.' \
	      'Do Not Edit ##' >> site.tmp
	@test ! -f site.exp ||                                           \
        sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp
	@-rm -f site.bak
	@test ! -f site.exp || mv site.exp site.bak
	@mv site.tmp site.exp

#
# Keep LLVM substitution in place. We have added two substitution for locating
# project source and object roots (PROJ_SOURCE_DIR and PROJ_BINARY_DIR
# respectively). The ToolDir substitution has been modifier in order to look for
# the real LLVM ToolDir, instead of the one of this tool.
#

lit.site.cfg: site.exp
	@echo "Making OpenCRun 'lit.site.cfg' file..."
	@echo s=@LLVM_SOURCE_DIR@=$(LLVM_SRC_ROOT)=g > lit.tmp
	@echo s=@LLVM_BINARY_DIR@=$(LLVM_OBJ_ROOT)=g >> lit.tmp
	@echo s=@LLVM_TOOLS_DIR@=$(LLVM_TOOL_DIR)=g >> lit.tmp
	@echo s=@LLVMGCCDIR@=$(LLVMGCCDIR)=g >> lit.tmp
	@echo s=@PYTHON_EXECUTABLE@=python=g >> lit.tmp
	@echo s=@ENABLE_SHARED@=$(ENABLE_SHARED)=g >> lit.tmp
	@echo s=@ENABLE_ASSERTIONS@=$(ENABLE_ASSERTIONS)=g >> lit.tmp
	@echo s=@PROJ_SOURCE_DIR@=$(PROJ_SRC_ROOT)=g >> lit.tmp
	@echo s=@PROJ_BINARY_DIR@=$(PROJ_OBJ_ROOT)=g >> lit.tmp
	@sed -f lit.tmp $(PROJ_SRC_DIR)/lit.site.cfg.in > $@
	@-rm -f lit.tmp

Unit/lit.site.cfg: $(PROJ_OBJ_DIR)/Unit/.dir FORCE
	@echo "Making OpenCRun unittest 'lit.site.cfg' file..."
	@echo s=@LLVM_SOURCE_DIR@=$(LLVM_SRC_ROOT)=g > unit.tmp
	@echo s=@LLVM_BINARY_DIR@=$(LLVM_OBJ_ROOT)=g >> unit.tmp
	@echo s=@LLVM_TOOLS_DIR@=$(LLVM_TOOL_DIR)=g >> unit.tmp
	@echo s=@LLVMGCCDIR@=$(LLVMGCCDIR)=g >> unit.tmp
	@echo s=@LLVM_BUILD_MODE@=$(BuildMode)=g >> unit.tmp
	@echo s=@ENABLE_SHARED@=$(ENABLE_SHARED)=g >> unit.tmp
	@echo s=@SHLIBDIR@=$(SharedLibDir)=g >> unit.tmp
	@echo s=@SHLIBPATH_VAR@=$(SHLIBPATH_VAR)=g >> unit.tmp
	@echo s=@PROJ_SOURCE_DIR@=$(PROJ_SRC_ROOT)=g >> unit.tmp
	@echo s=@PROJ_BINARY_DIR@=$(PROJ_OBJ_ROOT)=g >> unit.tmp
	@sed -f unit.tmp $(PROJ_SRC_DIR)/Unit/lit.site.cfg.in > $@
	@-rm -f unit.tmp
