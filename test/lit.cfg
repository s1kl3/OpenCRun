# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import sys
import re
import platform

# name: The name of this test suite.
config.name = 'COT'

# Tweak PATH for Win32 to decide to use bash.exe or not.
if sys.platform in ['win32']:
    # Seek sane tools in directories and set to $PATH.
    path = getattr(config, 'lit_tools_dir', None)
    path = lit.getToolsPath(path,
                            config.environment['PATH'],
                            ['cmp.exe', 'grep.exe', 'sed.exe'])
    if path is not None:
        path = os.path.pathsep.join((path,
                                     config.environment['PATH']))
        config.environment['PATH'] = path

# testFormat: The test format to use to interpret tests.
execute_external = (not sys.platform in ['win32']
                    or lit.getBashPath() not in [None, ""])
config.test_format = lit.formats.ShTest(execute_external)

# To ignore test output on stderr so it doesn't trigger failures uncomment this:
#config.test_format = lit.formats.TclTest(ignoreStdErr=True)

# suffixes: A list of file extensions to treat as test files, this is actually
# set by on_clone().
config.suffixes = []

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = ['Inputs']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
proj_obj_root = getattr(config, 'proj_obj_root', None)
if proj_obj_root is None:
  raise SystemExit

config.test_exec_root = os.path.join(proj_obj_root, 'test')

llvm_obj_root = getattr(config, 'llvm_obj_root', None)

###

# Tweak the PATH to include the scripts dir, the tools dir, and the llvm-gcc bin
# dir (if available).
if llvm_obj_root is not None:
  llvm_src_root = getattr(config, 'llvm_src_root', None)
  if not llvm_src_root:
    lit.fatal('No LLVM source root set!')
  path = os.path.pathsep.join((os.path.join(llvm_src_root, 'test', 'Scripts'),
                              config.environment['PATH']))
  config.environment['PATH'] = path

  llvm_tools_dir = getattr(config, 'llvm_tools_dir', None)
  if not llvm_tools_dir:
    lit.fatal('No LLVM tools dir set!')
  path = os.path.pathsep.join((llvm_tools_dir, config.environment['PATH']))
  config.environment['PATH'] = path

# Propagate 'HOME' through the environment.
if 'HOME' in os.environ:
  config.environment['HOME'] = os.environ['HOME']

# Propagate 'INCLUDE' through the environment.
if 'INCLUDE' in os.environ:
  config.environment['INCLUDE'] = os.environ['INCLUDE']

# Propagate 'LIB' through the environment.
if 'LIB' in os.environ:
  config.environment['LIB'] = os.environ['LIB']

# Propagate the temp directory. Windows requires this because it uses \Windows\
# if none of these are present.
if 'TMP' in os.environ:
  config.environment['TMP'] = os.environ['TMP']
if 'TEMP' in os.environ:
  config.environment['TEMP'] = os.environ['TEMP']

# Propagate LLVM_SRC_ROOT into the environment.
config.environment['LLVM_SRC_ROOT'] = getattr(config, 'llvm_src_root', '')

# Propagate PYTHON_EXECUTABLE into the environment
config.environment['PYTHON_EXECUTABLE'] = getattr(config, 'python_executable',
                                                  '')

###

# Add site-specific substitutions.
config.substitutions.append( ('%shlibext', config.proj_shlib_ext) )
config.substitutions.append( ('%projshlibdir', config.proj_shlib_dir) )

# For each occurrence of an llvm tool name as its own word, replace it
# with the full path to the build directory holding that tool.  This
# ensures that we are testing the tools just built and not some random
# tools that might happen to be in the user's PATH.  Thus this list
# includes every tool placed in $(LLVM_OBJ_ROOT)/$(BuildMode)/bin
# (llvm_tools_dir in lit parlance).
                # Don't match 'bugpoint-' or 'clang-'.
                # Don't match '/clang' or '-clang'.
if os.pathsep == ';':
  pathext = os.environ.get('PATHEXT', '').split(';')
else:
  pathext = ['']
for pattern in [r"\bbugpoint\b(?!-)",   r"(?<!/|-)\bclang\b(?!-)",
                r"\bgold\b",
                r"\bllc\b",             r"\blli\b",
                r"\bllvm-ar\b",         r"\bllvm-as\b",
                r"\bllvm-bcanalyzer\b", r"\bllvm-config\b",
                r"\bllvm-cov\b",        r"\bllvm-diff\b",
                r"\bllvm-dis\b",        r"\bllvm-dwarfdump\b",
                r"\bllvm-extract\b",    r"\bllvm-jistlistener\b",
                r"\bllvm-link\b",       r"\bllvm-mc\b",
                r"\bllvm-nm\b",         r"\bllvm-objdump\b",
                r"\bllvm-prof\b",       r"\bllvm-ranlib\b",
                r"\bllvm-rtdyld\b",     r"\bllvm-shlib\b",
                r"\bllvm-size\b",
                # Don't match '-llvmc'.
                r"(?<!-)\bllvmc\b",     r"\blto\b",
                                        # Don't match '.opt', '-opt',
                                        # '^opt' or '/opt'.
                r"\bmacho-dump\b",      r"(?<!\.|-|\^|/)\bopt\b",
                r"\bllvm-tblgen\b",     r"\bFileCheck\b",
                r"\bFileUpdate\b",      r"\bc-index-test\b",
                r"\bfpcmp\b",           r"\bllvm-PerfectShuffle\b",
                # Handle these specially as they are strings searched
                # for during testing.
                r"\| \bcount\b",         r"\| \bnot\b"]:
  # Extract the tool name from the pattern.  This relies on the tool
  # name being surrounded by \b word match operators.  If the
  # pattern starts with "| ", include it in the string to be
  # substituted.
  substitution = re.sub(r"^(\\)?((\| )?)\W+b([0-9A-Za-z-_]+)\\b\W*$",
                        r"\2" + llvm_tools_dir + "/" + r"\4",
                        pattern)
  for ext in pathext:
    substitution_ext = substitution + ext
    if os.path.exists(substitution_ext):
      substitution = substitution_ext
      break
  config.substitutions.append((pattern, substitution))

### Features

# Shell execution
if sys.platform not in ['win32'] or lit.getBashPath() != '':
  config.available_features.add('shell')

# Loadable module
# FIXME: This should be supplied by Makefile or autoconf.
if sys.platform in ['win32', 'cygwin']:
  loadable_module = (config.enable_shared == 1)
else:
  loadable_module = True

if loadable_module:
  config.available_features.add('loadable_module')

# LTO on OS X
if config.lto_is_enabled == "1" and platform.system() == "Darwin":
  config.available_features.add('lto_on_osx')

# llc knows whether he is compiled with -DNDEBUG.
import subprocess
try:
  llc_cmd = subprocess.Popen([os.path.join(llvm_tools_dir, 'llc'), '-version'],
                             stdout = subprocess.PIPE)
except OSError, why:
  print "Could not find llc in " + llvm_tools_dir
  exit(42)

if re.search(r'with assertions', llc_cmd.stdout.read()):
  config.available_features.add('asserts')
llc_cmd.wait()
